#+title: Creation of katha linux from scratch
#+author: Dinabandhu Khatiwada

* First Steps 
This document is a personal companion to the main LFS resources and is
not exhaustive at all. It's purpose is to document my steps and make
troubleshooting easier.
Refer to primary LFS resources. The version being used is 12.3. See
also errata and bugfixes, security updates.

Done on Debian 12.11.0 bookworm as host which itself is a VM inside qemu.

add /export LFS=your/chosen/directory/ but it's recommended to use
~export LFS=/mnt/lfs~ to .bashrc or .zshrc. It will alleviate a lot of confusion thereafter.

<<<<<<< HEAD
=======
(optional)Install spice-vdagent to copy clipboard to and from host to
guest machine. Taking notes, documenting on the host for convenience.

- when directed some action as root user, actually login as root user via
  ~su~. into ~[root@debian]#~ . Issuing ~sudo someuser <command>~ will cause ownership issues later on.

>>>>>>> origin/main
** Check host system requirements
   All requirements fullfilled

** Creating a partition
   
Extended the primary qemu disk from 50 GB to 90 GB with following steps:
- Turn off the VM and ensure no snapshots exist
- on the host run /sudo qemu-img resize /path/to/disk/image.qcow +40G/
- boot into the VM and run
  - install cloud-guest-utils via your distributions package manager.
    - I'm on manjaro so /sudo pamac install cloud-guest-utils/
  - /lsblk/
  - /sudo growpart /dev/vda 1/ in my case the root partition is 1, yours could be different so see the output of lsblk
  - I used gparted on manjaro to create other convenience partitions
*** Convenience partitions
 i wont create //usr because /initramfs (not covered by LFS) will be needed to boot a system with a separate /usr partition./ and /tmp/
 - create the 400MB boot partition first and flag as boot
 - 25 GB home partiton
 - 1GB fat32 uefi partition
 - 30GB /usr/src partition
 - 13GB /opt partition
**** Efi partition
- I created 1024 MiB fat32 partition as said in [[https://wiki.archlinux.org/title/EFI_system_partition][AUR efi filesystem partition]]
- installed dosfstools and mtools for gparted to read that partition
- flagged that partition as esp after partitioning
- ran
#+begin_src bash
  sudo mkfs.fat -F 32 /dev/vda4
  [sudo] password for katha: 
  mkfs.fat 4.2 (2021-01-31)
#+end_src

[[https://askubuntu.com/a/1313158][Optimal EFI partition size]]

** Setting LFS variable and Umask
- /export LFS=/mnt/lfs/
- umask 022


** Mounting the partitions

#+begin_src bash
sudo mkdir -pv $LFS
sudo mount -v -t ext4 /dev/vda7 $LFS
sudo mkdir -v -p $LFS/boot
sudo mount -v -t ext4 /dev/vda5 $LFS/boot
sudo mkdir -v -p $LFS/usr/src
sudo mount -v -t ext4 /dev/vda9 $LFS/usr/src
sudo mkdir -v -p $LFS/opt
sudo mount -v -t ext4 /dev/vda8 $LFS/opt
sudo mkdir -v -p $LFS/boot/efi
sudo mount -v -t vfat /dev/vda6 $LFS/boot/efi   
#+end_src

mount command yields

#+begin_src bash
/dev/vda7 on /mnt/lfs type ext4 (rw,relatime)
/dev/vda5 on /mnt/lfs/boot type ext4 (rw,relatime)
/dev/vda9 on /mnt/lfs/usr/src type ext4 (rw,relatime)
/dev/vda8 on /mnt/lfs/opt type ext4 (rw,relatime)
/dev/vda6 on /mnt/lfs/boot/efi type vfat (rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro)
katha@debian:/mnt/lfs$ 
#+end_src

#+begin_src bash

#+end_src




** Packages and patches
- Download and verify md5 hashes
- then run /chown root:root $LFS/sources/*/
- always make sure /usr/lib64 doesn't appear as said in the LFS book

* Final preparation

** Creating dir layout
   Done

** Adding LFS User
#+begin_src bash
  groupadd lfs
  useradd -s /bin/bash -g lfs -m -k /dev/null lfs
#+end_src

#+begin_src bash
  passwd lfs
#+end_src

#+begin_src bash
  chown -v lfs $LFS/{usr{,/*},var,etc,tools}
  case $(uname -m) in
    x86_64) chown -v lfs $LFS/lib64 ;;
  esac
#+end_src

#+begin_src bash
  su - lfs
#+end_src
   after adding lfs user make sure to add this line to /etc/sudoers:
    ~%lfs ALL=(ALL) NOPASSWD: ALL~
    thanks to [[https://www.linuxquestions.org/questions/linux-from-scratch-13/lfs-is-not-in-sudoers-file-error-in-lfs-6-6-a-813646/#post4904970][this linuxquestions.org forum answer]]
- do this to avoid having to use sudo which might break glibc and
    further installs
   #+begin_src bash
     sudo chown -R lfs:lfs $LFS
     sudo chown -R lfs:lfs $LFS/tools
   #+end_src

** Setting up Environment
   #+begin_src bash
     cat > ~/.bash_profile << "EOF"
     exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
     EOF
   #+end_src

#+begin_src bash
  cat > ~/.bashrc << "EOF"
  set +h
  umask 022
  LFS=/mnt/lfs
  LC_ALL=POSIX
  LFS_TGT=$(uname -m)-lfs-linux-gnu
  PATH=/usr/bin
  if [ ! -L /bin ]; then PATH=/bin:$PATH; fi
  PATH=$LFS/tools/bin:$PATH
  CONFIG_SITE=$LFS/usr/share/config.site
  export LFS LC_ALL LFS_TGT PATH CONFIG_SITE
  EOF
#+end_src

Execute this as root to avoid environment pollution by manjaro host
#+begin_src bash
[ ! -e /etc/bash.bashrc ] || mv -v /etc/bash.bashrc /etc/bash.bashrc.NOUSE
#+end_src

I'll be using 5 cores on the VM out of 6 so as not to freeze
#+begin_src bash
  cat >> ~/.bashrc << "EOF"
  export MAKEFLAGS=-j5
  EOF
#+end_src
#+begin_src bash
  source ~/.bash_profile
#+end_src

** Chapter5 Cross compiling a toolchain
- ran ~sudo chown -R lfs:lfs $LFS~ and ~sudo chown -R lfs:lfs $LFS/tools~
- that fixed the need to do everything as sudo. sudo install of Glibc would have broken the final system for sure


*** Compiling bash 5.2.37
<<<<<<< HEAD
- Gcc 15 breaks bash 5.2.37 so I switched to debian 12.11.0 entirely
  and started the process all over. It has gcc 12.2.0
=======
- gcc 15 breaks bash 5.2.37


>>>>>>> origin/main


* Mistakes made
  - These are my speculations mostly
  - Choosing manjaro, should've chosen debian instead.
  - Never use relative paths with symbolic links as shown in section
    5.5 Glibc-2.4.1. I've broken Manjaro on qemu thrice with the
    error
    #+begin_src bash
      too may levels of symbolic links
    #+end_src

    Not really. Seems the /mnt/lfs/lib64 folder that had to be created was not created properly.
    On top I ran the script
    #+begin_src bash
       case $(uname -m) in
          i?86)   ln -sfv ld-linux.so.2 $LFS/lib/ld-lsb.so.3
          ;;
          x86_64) ln -sfv ../lib/ld-linux-x86-64.so.2 $LFS/lib64
                  ln -sfv ../lib/ld-linux-x86-64.so.2 $LFS/lib64/ld-lsb-x86-64.so.3
          ;;
      esac
    #+end_src
    with sudo so it created symlink mess and broke manjaro. When I created dirs with
    #+begin_src bash
      mkdir -pv $LFS/{etc,var} $LFS/usr/{bin,lib,sbin}

      for i in bin lib sbin; do
        ln -sv usr/$i $LFS/$i
      done

      case $(uname -m) in
        x86_64) mkdir -pv $LFS/lib64 ;;
      esac
    #+end_src

    #+begin_src bash
      sudo mkdir /mnt/lfs/lib64
    #+end_src
    and ensured ~lib64/~ was really there, then there were no problems
    with the symbolic links.
  - Issued sudo commands as another user(incorrect) instead of logging into superuser shell as root via
    ~su~ and issuing commands as root ~root@debian #~ (correct).
